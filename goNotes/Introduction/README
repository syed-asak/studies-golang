🧠 Why Go Programming?

Most modern programming languages support multithreading, enabling concurrent task execution.
However, building reliable multithreaded applications is difficult due to issues such as:

    🔁 Race Conditions
    Occur when multiple threads access shared data without proper synchronization.

    🧱 Deadlocks
    Happen when threads wait indefinitely for each other's resources.

🚫 Java Threading Limitation

    In Java, creating a new thread consumes ~1 MB of heap memory.

    Spawning thousands of threads can quickly exhaust memory and may result in an OutOfMemoryError.

✅ Go’s Solution: Goroutines

Go solves this problem with goroutines, which are:

    🧵 Lightweight threads managed by the Go runtime.

    🔽 Start with ~2 KB of memory (compared to 1 MB in Java).

    📈 Automatically grow in memory usage as needed.

    🚀 Highly scalable – you can run millions of goroutines concurrently.

    🧩 Not tied 1:1 to OS threads – the Go runtime schedules them efficiently on available threads.



📘 Go Data Types — Quick Notes

🔹 Numeric Types:

        Integers:

            Signed: int, int8, int16, int32, int64

            Unsigned: uint, uint8 (alias for byte), uint16, uint32, uint64

        Floating-point: float32, float64

        Complex Numbers: complex64, complex128

  🔹 String Types:

  string – A sequence of bytes, used to represent text, immutable types ie once created we cannot change
  the contents of a string.
  Go supports two types of string literals: double-quote style and the back-quote style.
     ex:- "GO Programming"
          'GO Programming'
  Note: With regular double-quoted strings, the special sequences like newlines are interpreted as actual
        newlines while escape sequence are ignored in the backtick character and treated as normal values.   

🔹  Boolean type: true/false, by default false.

📘 Go Constants — Quick Notes
In Go, const is a keyword that introduces a name for a scalar value like 3.14159. such values are called 
constants.
Type inference: When a variable is declared without specifying an explicit type (either by using the := syntax
or the var = expresssion syntax), the variable's type is inferred from the value on the right-hand side.
