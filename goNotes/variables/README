ðŸŽ¯ Variable Declaration

Variables declared without an explicit initial value are assigned the default zero value for numeric types, 
false for boolean types and " " (the empty string) for string type.

1. In Go, the type of the variable is specified after the variable name.
2. If you want to put two (or more) statements on one line, they must be separated with a semicolon(;).
3. When declaring a variable, it is assigned the natural null value for the type.
4. This means that here. after var i int, i has a value of 0.
5. With var s string, s is assigned the zero string which is " ".

ðŸ“˜ When Go finds the := assignment syntax, it understands that a new variable needs to be declared with an initial
vallues.
But you cannot use this syntax to assign a value to pre-defined variable. The variable type is deduced from the value.
For example a value of 20 indicates an int and a value of ture tells Go that the type should be Boolean.

ðŸ“˜ Typed constant and untyped constant.

Go is called a statically typed programming language. ie it will not allow performing operations that mix numeric
types. example e cannot add an int variable to int64 variable as shown below.

var x int = 100
var y int64 = 200
var sum = x + y // it will give a compiler error.
but
var sum = x + int(y)   // this will work as we are making both x and y as int.

ðŸ“˜Typed constant -> const x float64 = 9.75
                  const x int = 10
ðŸ“˜Untyped constant-> 20
                   "Golang"
                    false
ðŸ“˜Multi Constant -> const x, y,z int = 10, 20, 30

ðŸ“˜Redeclaration concept -> If a variable is already declared, we cannot redeclare that variable in the same block.
   func main() {
      a := 10
      b := 20
      fmt.Println(a)
   }
   this gives an error "no new variables on left side of :="

    func main() {
      a := 10
      a, b := 20, 30
      fmt.Println("value of a :", a)
      fmt.Println(value of b :", b)
    }
Output-
value of a: 20
value of b: 30
    
ðŸ“˜Reassignment concept -> example program
